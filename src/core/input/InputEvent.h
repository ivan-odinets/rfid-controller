/*
 **********************************************************************************************************************
 *
 * This file is part of RFID Controller.
 *
 * RFID Controller is free software: you can redistribute it and/or modify it under the terms of the GNU General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * RFID Controller is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with RFID Controller. If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

#ifndef INPUTEVENT_H
#define INPUTEVENT_H

#include <QtGlobal>

#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)
    #include <linux/input.h>
#elif defined(Q_OS_LINUX) && defined(Q_OS_ANDROID)
    #error("Android builds currently not supported")
#elif defined(Q_OS_WINDOWS)
    #error("Windows builds currently not supported")
#else
    #error("Builds for other platforms are not supported")
#endif //PLATFORM SPECIFIC

/*!
 * @class InputEvent core/input/InputEvent.h
 * @brief This class is represntation of event generated by HID device. IMPORTANT This is not the final version of the interface
 *        In will be definetely changed in future, while adding support for Android and Windows platform.
 */

class InputEvent
{
#if defined(Q_OS_LINUX) && !defined(Q_OS_ANDROID)
//
// Linux-specific part of InputEvnt
//

public:
    enum Type {
        Syn, //Used as markers to separate events. Events may be separated in time or in space, such as with the multitouch protocol.
        Key, //Used to describe state changes of keyboards, buttons, or other key-like devices.
        Rel, //Used to describe relative axis value changes, e.g. moving the mouse 5 units to the left.
        Abs, //Used to describe absolute axis value changes, e.g. describing the coordinates of a touch on a touchscreen.
        Msc, //Used to describe miscellaneous input data that do not fit into other types.
        Sw,  //Used to describe binary state input switches.
        Led, //Used to turn LEDs on devices on and off.
        Snd, //Used to output sound to devices.
        Rep, //Used for autorepeating devices.
        Ff,  //Used to send force feedback commands to an input device.
        Power = EV_PWR, //A special type for power button and switch input.
        Status = EV_FF_STATUS, //Used to receive force feedback device status.
        Max = 0x1f,
        CNT
    };

    InputEvent(const input_event& event);

    Type    type() const                                   { return m_type; }
    quint8  code() const                                   { return m_code; }
    char    charCode() const                               { return _codeToChar(m_code); }
    qint8   value() const                                  { return m_value; }

private:
    InputEvent() =delete;
    Type m_type;
    quint8 m_code;
    qint8  m_value;

    static Type _typeFromInt(quint8 value);
    static char _codeToChar(quint8 code);
#elif defined(Q_OS_LINUX) && defined(Q_OS_ANDROID)
    #error("Android builds currently not supported")
#elif defined(Q_OS_WINDOWS)
    #error("Windows builds currently not supported")
#else
    #error("Builds for other platforms are not supported")
#endif //PLATFORM SPECIFIC
};

#endif // INPUTEVENT_H
